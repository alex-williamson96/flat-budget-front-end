{"version":3,"file":"index.development.js","sources":["../../src/createBaseQuery.ts","../../src/createInfiniteQuery.ts","../../src/createMutation.ts","../../src/createQuery.tsx"],"sourcesContent":["import type { SetDataOptions, UseBaseQueryOptions } from '@tanstack/react-query'\nimport { useQueryClient } from '@tanstack/react-query'\nimport type {\n  AdditionalCreateOptions,\n  AdditionalQueryHookOptions,\n  Updater,\n} from './types'\n\ninterface CreateQueryOptions\n  extends Omit<UseBaseQueryOptions, 'queryKey' | 'queryFn' | 'enabled'>,\n    AdditionalCreateOptions<any, any> {\n  useDefaultOptions?: () => QueryBaseHookOptions\n}\n\ntype QueryBaseHookOptions = Omit<\n  UseBaseQueryOptions,\n  'queryKey' | 'queryFn' | 'enabled'\n> &\n  AdditionalQueryHookOptions<any, any> & { context?: any }\n\nexport function createBaseQuery(\n  options: any,\n  useRQHook: (options: any, queryClient?: any) => any,\n  queryClient?: any\n): any {\n  const {\n    primaryKey,\n    queryFn,\n    queryKeyHashFn,\n    useDefaultOptions,\n    ...defaultOptions\n  } = options as CreateQueryOptions\n\n  const getPrimaryKey = () => primaryKey\n\n  const getKey = (variables?: any) =>\n    variables === undefined ? [primaryKey] : [primaryKey, variables]\n\n  const useGeneratedQuery = (options: QueryBaseHookOptions) => {\n    const { enabled, variables, ...mergedOptions } = {\n      ...defaultOptions,\n      ...useDefaultOptions?.(),\n      ...options,\n    } as QueryBaseHookOptions\n\n    const queryKey = getKey(variables)\n\n    const client = useQueryClient(\n      // compatible with ReactQuery v4\n      mergedOptions.context ? { context: mergedOptions.context } : queryClient\n    )\n\n    const queryOptions = {\n      ...mergedOptions,\n      enabled:\n        typeof enabled === 'function'\n          ? enabled(client.getQueryData(queryKey), variables)\n          : enabled,\n      queryKeyHashFn,\n      queryFn,\n      queryKey,\n    }\n\n    return Object.assign(useRQHook(queryOptions, client), {\n      queryKey,\n      variables,\n      setData: (updater: Updater<any, any>, setDataOptions?: SetDataOptions) =>\n        client.setQueryData(queryKey, updater, setDataOptions),\n    })\n  }\n\n  return Object.assign(useGeneratedQuery, {\n    getPrimaryKey,\n    getKey,\n    queryFn,\n    queryKeyHashFn,\n  })\n}\n","import type { QueryClient } from '@tanstack/react-query'\nimport { useInfiniteQuery } from '@tanstack/react-query'\nimport { createBaseQuery } from './createBaseQuery'\nimport type {\n  AdditionalCreateOptions,\n  CompatibleUseInfiniteQueryOptions,\n  CompatibleWithV4,\n  InfiniteQueryHook,\n  InfiniteQueryHookOptions,\n} from './types'\n\nexport interface CreateInfiniteQueryOptions<\n  TFnData,\n  TVariables = any,\n  Error = unknown,\n  TPageParam = number\n> extends Omit<\n      CompatibleUseInfiniteQueryOptions<TFnData, TVariables, Error, TPageParam>,\n      'queryKey' | 'queryFn' | 'enabled' | 'select'\n    >,\n    AdditionalCreateOptions<TFnData, TVariables, TPageParam> {}\n\nexport function createInfiniteQuery<\n  TFnData,\n  TVariables = any,\n  Error = unknown,\n  TPageParam = number\n>(\n  options: CreateInfiniteQueryOptions<\n    TFnData,\n    TVariables,\n    Error,\n    TPageParam\n  > & {\n    useDefaultOptions: () => Omit<\n      InfiniteQueryHookOptions<\n        TFnData,\n        Error,\n        TVariables,\n        TVariables,\n        TPageParam\n      >,\n      'select'\n    > & { variables: TVariables }\n  },\n  queryClient?: CompatibleWithV4<QueryClient, void>\n): InfiniteQueryHook<TFnData, TVariables, Error, TPageParam, TVariables | void>\n\nexport function createInfiniteQuery<\n  TFnData,\n  TVariables = any,\n  Error = unknown,\n  TPageParam = number\n>(\n  options: CreateInfiniteQueryOptions<\n    TFnData,\n    TVariables,\n    Error,\n    TPageParam\n  > & {\n    useDefaultOptions: () => Omit<\n      InfiniteQueryHookOptions<\n        TFnData,\n        Error,\n        TVariables,\n        TPageParam,\n        TVariables\n      >,\n      'select' | 'variables'\n    >\n  },\n  queryClient?: CompatibleWithV4<QueryClient, void>\n): InfiniteQueryHook<TFnData, TVariables, Error, TPageParam, TVariables>\n\nexport function createInfiniteQuery<\n  TFnData,\n  TVariables = any,\n  Error = unknown,\n  TPageParam = number\n>(\n  options: CreateInfiniteQueryOptions<TFnData, TVariables, Error, TPageParam>,\n  queryClient?: CompatibleWithV4<QueryClient, void>\n): InfiniteQueryHook<TFnData, TVariables, Error, TPageParam, TVariables>\n\nexport function createInfiniteQuery(options: any, queryClient?: any) {\n  return createBaseQuery(options, useInfiniteQuery, queryClient)\n}\n","import { useMutation } from '@tanstack/react-query'\nimport type { QueryClient, UseMutationOptions } from '@tanstack/react-query'\nimport type {\n  CompatibleWithV4,\n  MutationHook,\n  MutationHookOptions,\n} from './types'\n\nexport interface CreateMutationOptions<TData, TError, TVariables, TContext>\n  extends UseMutationOptions<TData, TError, TVariables, TContext> {\n  useDefaultOptions?: () => MutationHookOptions<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n}\n\nexport function createMutation<\n  TData = unknown,\n  TVariables = void,\n  TError = unknown,\n  TContext = unknown\n>(\n  {\n    useDefaultOptions,\n    ...defaultOptions\n  }: CreateMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: CompatibleWithV4<QueryClient, void>\n): MutationHook<TData, TError, TVariables> {\n  const getKey = () => defaultOptions.mutationKey\n\n  const useGeneratedMutation = (\n    options?: MutationHookOptions<TData, TError, TVariables, TContext>\n  ) => {\n    return useMutation(\n      {\n        ...defaultOptions,\n        ...useDefaultOptions?.(),\n        ...options,\n      },\n      queryClient\n    )\n  }\n\n  return Object.assign(useGeneratedMutation, {\n    getKey,\n    mutationFn: defaultOptions.mutationFn,\n  }) as MutationHook<TData, TError, TVariables>\n}\n","import type { QueryClient, UseQueryOptions } from '@tanstack/react-query'\nimport { useQuery } from '@tanstack/react-query'\nimport { createBaseQuery } from './createBaseQuery'\nimport type {\n  AdditionalCreateOptions,\n  CompatibleWithV4,\n  QueryHook,\n  QueryHookOptions,\n  inferQueryKey,\n} from './types'\n\nexport interface CreateQueryOptions<TFnData, TVariables = any, Error = unknown>\n  extends Omit<\n      UseQueryOptions<TFnData, Error, TFnData, inferQueryKey<TVariables>>,\n      'queryKey' | 'queryFn' | 'enabled' | 'select'\n    >,\n    AdditionalCreateOptions<TFnData, TVariables> {}\n\nexport function createQuery<TFnData, TVariables = any, Error = unknown>(\n  options: CreateQueryOptions<TFnData, TVariables, Error> & {\n    useDefaultOptions: () => Omit<\n      QueryHookOptions<TFnData, Error, TFnData, TVariables>,\n      'select'\n    > & { variables: TVariables }\n  },\n  queryClient?: CompatibleWithV4<QueryClient, void>\n): QueryHook<TFnData, TVariables, Error, TVariables | void>\n\nexport function createQuery<TFnData, TVariables = any, Error = unknown>(\n  options: CreateQueryOptions<TFnData, TVariables, Error> & {\n    useDefaultOptions: () => Omit<\n      QueryHookOptions<TFnData, Error, TFnData, TVariables>,\n      'select' | 'variables'\n    >\n  },\n  queryClient?: CompatibleWithV4<QueryClient, void>\n): QueryHook<TFnData, TVariables, Error, TVariables>\n\nexport function createQuery<TFnData, TVariables = any, Error = unknown>(\n  options: CreateQueryOptions<TFnData, TVariables, Error>,\n  queryClient?: CompatibleWithV4<QueryClient, void>\n): QueryHook<TFnData, TVariables, Error, TVariables>\n\nexport function createQuery(options: any, queryClient?: any) {\n  return createBaseQuery(options, useQuery, queryClient)\n}\n"],"names":["createBaseQuery","options","useRQHook","queryClient","primaryKey","queryFn","queryKeyHashFn","useDefaultOptions","defaultOptions","getPrimaryKey","getKey","variables","undefined","useGeneratedQuery","enabled","mergedOptions","queryKey","client","useQueryClient","context","queryOptions","getQueryData","Object","assign","setData","updater","setDataOptions","setQueryData","createInfiniteQuery","useInfiniteQuery","createMutation","mutationKey","useGeneratedMutation","useMutation","mutationFn","createQuery","useQuery"],"mappings":"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"}