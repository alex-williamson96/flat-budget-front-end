(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@tanstack/react-query')) :
  typeof define === 'function' && define.amd ? define(['exports', '@tanstack/react-query'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ReactQueryKit = {}, global.ReactQuery));
})(this, (function (exports, reactQuery) { 'use strict';

  function createBaseQuery(options, useRQHook, queryClient) {
    const {
      primaryKey,
      queryFn,
      queryKeyHashFn,
      useDefaultOptions,
      ...defaultOptions
    } = options;

    const getPrimaryKey = () => primaryKey;

    const getKey = variables => variables === undefined ? [primaryKey] : [primaryKey, variables];

    const useGeneratedQuery = options => {
      const {
        enabled,
        variables,
        ...mergedOptions
      } = { ...defaultOptions,
        ...(useDefaultOptions == null ? void 0 : useDefaultOptions()),
        ...options
      };
      const queryKey = getKey(variables);
      const client = reactQuery.useQueryClient( // compatible with ReactQuery v4
      mergedOptions.context ? {
        context: mergedOptions.context
      } : queryClient);
      const queryOptions = { ...mergedOptions,
        enabled: typeof enabled === 'function' ? enabled(client.getQueryData(queryKey), variables) : enabled,
        queryKeyHashFn,
        queryFn,
        queryKey
      };
      return Object.assign(useRQHook(queryOptions, client), {
        queryKey,
        variables,
        setData: (updater, setDataOptions) => client.setQueryData(queryKey, updater, setDataOptions)
      });
    };

    return Object.assign(useGeneratedQuery, {
      getPrimaryKey,
      getKey,
      queryFn,
      queryKeyHashFn
    });
  }

  function createInfiniteQuery(options, queryClient) {
    return createBaseQuery(options, reactQuery.useInfiniteQuery, queryClient);
  }

  function createMutation({
    useDefaultOptions,
    ...defaultOptions
  }, queryClient) {
    const getKey = () => defaultOptions.mutationKey;

    const useGeneratedMutation = options => {
      return reactQuery.useMutation({ ...defaultOptions,
        ...(useDefaultOptions == null ? void 0 : useDefaultOptions()),
        ...options
      }, queryClient);
    };

    return Object.assign(useGeneratedMutation, {
      getKey,
      mutationFn: defaultOptions.mutationFn
    });
  }

  function createQuery(options, queryClient) {
    return createBaseQuery(options, reactQuery.useQuery, queryClient);
  }

  exports.createInfiniteQuery = createInfiniteQuery;
  exports.createMutation = createMutation;
  exports.createQuery = createQuery;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=index.development.js.map
