{"version":3,"file":"index.production.js","sources":["../../src/createBaseQuery.ts","../../src/createInfiniteQuery.ts","../../src/createMutation.ts","../../src/createQuery.tsx"],"sourcesContent":["import type { SetDataOptions, UseBaseQueryOptions } from '@tanstack/react-query'\nimport { useQueryClient } from '@tanstack/react-query'\nimport type {\n  AdditionalCreateOptions,\n  AdditionalQueryHookOptions,\n  Updater,\n} from './types'\n\ninterface CreateQueryOptions\n  extends Omit<UseBaseQueryOptions, 'queryKey' | 'queryFn' | 'enabled'>,\n    AdditionalCreateOptions<any, any> {\n  useDefaultOptions?: () => QueryBaseHookOptions\n}\n\ntype QueryBaseHookOptions = Omit<\n  UseBaseQueryOptions,\n  'queryKey' | 'queryFn' | 'enabled'\n> &\n  AdditionalQueryHookOptions<any, any> & { context?: any }\n\nexport function createBaseQuery(\n  options: any,\n  useRQHook: (options: any, queryClient?: any) => any,\n  queryClient?: any\n): any {\n  const {\n    primaryKey,\n    queryFn,\n    queryKeyHashFn,\n    useDefaultOptions,\n    ...defaultOptions\n  } = options as CreateQueryOptions\n\n  const getPrimaryKey = () => primaryKey\n\n  const getKey = (variables?: any) =>\n    variables === undefined ? [primaryKey] : [primaryKey, variables]\n\n  const useGeneratedQuery = (options: QueryBaseHookOptions) => {\n    const { enabled, variables, ...mergedOptions } = {\n      ...defaultOptions,\n      ...useDefaultOptions?.(),\n      ...options,\n    } as QueryBaseHookOptions\n\n    const queryKey = getKey(variables)\n\n    const client = useQueryClient(\n      // compatible with ReactQuery v4\n      mergedOptions.context ? { context: mergedOptions.context } : queryClient\n    )\n\n    const queryOptions = {\n      ...mergedOptions,\n      enabled:\n        typeof enabled === 'function'\n          ? enabled(client.getQueryData(queryKey), variables)\n          : enabled,\n      queryKeyHashFn,\n      queryFn,\n      queryKey,\n    }\n\n    return Object.assign(useRQHook(queryOptions, client), {\n      queryKey,\n      variables,\n      setData: (updater: Updater<any, any>, setDataOptions?: SetDataOptions) =>\n        client.setQueryData(queryKey, updater, setDataOptions),\n    })\n  }\n\n  return Object.assign(useGeneratedQuery, {\n    getPrimaryKey,\n    getKey,\n    queryFn,\n    queryKeyHashFn,\n  })\n}\n","import type { QueryClient } from '@tanstack/react-query'\nimport { useInfiniteQuery } from '@tanstack/react-query'\nimport { createBaseQuery } from './createBaseQuery'\nimport type {\n  AdditionalCreateOptions,\n  CompatibleUseInfiniteQueryOptions,\n  CompatibleWithV4,\n  InfiniteQueryHook,\n  InfiniteQueryHookOptions,\n} from './types'\n\nexport interface CreateInfiniteQueryOptions<\n  TFnData,\n  TVariables = any,\n  Error = unknown,\n  TPageParam = number\n> extends Omit<\n      CompatibleUseInfiniteQueryOptions<TFnData, TVariables, Error, TPageParam>,\n      'queryKey' | 'queryFn' | 'enabled' | 'select'\n    >,\n    AdditionalCreateOptions<TFnData, TVariables, TPageParam> {}\n\nexport function createInfiniteQuery<\n  TFnData,\n  TVariables = any,\n  Error = unknown,\n  TPageParam = number\n>(\n  options: CreateInfiniteQueryOptions<\n    TFnData,\n    TVariables,\n    Error,\n    TPageParam\n  > & {\n    useDefaultOptions: () => Omit<\n      InfiniteQueryHookOptions<\n        TFnData,\n        Error,\n        TVariables,\n        TVariables,\n        TPageParam\n      >,\n      'select'\n    > & { variables: TVariables }\n  },\n  queryClient?: CompatibleWithV4<QueryClient, void>\n): InfiniteQueryHook<TFnData, TVariables, Error, TPageParam, TVariables | void>\n\nexport function createInfiniteQuery<\n  TFnData,\n  TVariables = any,\n  Error = unknown,\n  TPageParam = number\n>(\n  options: CreateInfiniteQueryOptions<\n    TFnData,\n    TVariables,\n    Error,\n    TPageParam\n  > & {\n    useDefaultOptions: () => Omit<\n      InfiniteQueryHookOptions<\n        TFnData,\n        Error,\n        TVariables,\n        TPageParam,\n        TVariables\n      >,\n      'select' | 'variables'\n    >\n  },\n  queryClient?: CompatibleWithV4<QueryClient, void>\n): InfiniteQueryHook<TFnData, TVariables, Error, TPageParam, TVariables>\n\nexport function createInfiniteQuery<\n  TFnData,\n  TVariables = any,\n  Error = unknown,\n  TPageParam = number\n>(\n  options: CreateInfiniteQueryOptions<TFnData, TVariables, Error, TPageParam>,\n  queryClient?: CompatibleWithV4<QueryClient, void>\n): InfiniteQueryHook<TFnData, TVariables, Error, TPageParam, TVariables>\n\nexport function createInfiniteQuery(options: any, queryClient?: any) {\n  return createBaseQuery(options, useInfiniteQuery, queryClient)\n}\n","import { useMutation } from '@tanstack/react-query'\nimport type { QueryClient, UseMutationOptions } from '@tanstack/react-query'\nimport type {\n  CompatibleWithV4,\n  MutationHook,\n  MutationHookOptions,\n} from './types'\n\nexport interface CreateMutationOptions<TData, TError, TVariables, TContext>\n  extends UseMutationOptions<TData, TError, TVariables, TContext> {\n  useDefaultOptions?: () => MutationHookOptions<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n}\n\nexport function createMutation<\n  TData = unknown,\n  TVariables = void,\n  TError = unknown,\n  TContext = unknown\n>(\n  {\n    useDefaultOptions,\n    ...defaultOptions\n  }: CreateMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: CompatibleWithV4<QueryClient, void>\n): MutationHook<TData, TError, TVariables> {\n  const getKey = () => defaultOptions.mutationKey\n\n  const useGeneratedMutation = (\n    options?: MutationHookOptions<TData, TError, TVariables, TContext>\n  ) => {\n    return useMutation(\n      {\n        ...defaultOptions,\n        ...useDefaultOptions?.(),\n        ...options,\n      },\n      queryClient\n    )\n  }\n\n  return Object.assign(useGeneratedMutation, {\n    getKey,\n    mutationFn: defaultOptions.mutationFn,\n  }) as MutationHook<TData, TError, TVariables>\n}\n","import type { QueryClient, UseQueryOptions } from '@tanstack/react-query'\nimport { useQuery } from '@tanstack/react-query'\nimport { createBaseQuery } from './createBaseQuery'\nimport type {\n  AdditionalCreateOptions,\n  CompatibleWithV4,\n  QueryHook,\n  QueryHookOptions,\n  inferQueryKey,\n} from './types'\n\nexport interface CreateQueryOptions<TFnData, TVariables = any, Error = unknown>\n  extends Omit<\n      UseQueryOptions<TFnData, Error, TFnData, inferQueryKey<TVariables>>,\n      'queryKey' | 'queryFn' | 'enabled' | 'select'\n    >,\n    AdditionalCreateOptions<TFnData, TVariables> {}\n\nexport function createQuery<TFnData, TVariables = any, Error = unknown>(\n  options: CreateQueryOptions<TFnData, TVariables, Error> & {\n    useDefaultOptions: () => Omit<\n      QueryHookOptions<TFnData, Error, TFnData, TVariables>,\n      'select'\n    > & { variables: TVariables }\n  },\n  queryClient?: CompatibleWithV4<QueryClient, void>\n): QueryHook<TFnData, TVariables, Error, TVariables | void>\n\nexport function createQuery<TFnData, TVariables = any, Error = unknown>(\n  options: CreateQueryOptions<TFnData, TVariables, Error> & {\n    useDefaultOptions: () => Omit<\n      QueryHookOptions<TFnData, Error, TFnData, TVariables>,\n      'select' | 'variables'\n    >\n  },\n  queryClient?: CompatibleWithV4<QueryClient, void>\n): QueryHook<TFnData, TVariables, Error, TVariables>\n\nexport function createQuery<TFnData, TVariables = any, Error = unknown>(\n  options: CreateQueryOptions<TFnData, TVariables, Error>,\n  queryClient?: CompatibleWithV4<QueryClient, void>\n): QueryHook<TFnData, TVariables, Error, TVariables>\n\nexport function createQuery(options: any, queryClient?: any) {\n  return createBaseQuery(options, useQuery, queryClient)\n}\n"],"names":["createBaseQuery","options","useRQHook","queryClient","primaryKey","queryFn","queryKeyHashFn","useDefaultOptions","defaultOptions","getKey","variables","undefined","Object","assign","enabled","mergedOptions","queryKey","client","useQueryClient","context","queryOptions","getQueryData","setData","updater","setDataOptions","setQueryData","getPrimaryKey","useInfiniteQuery","useMutation","mutationKey","mutationFn","useQuery"],"mappings":"6TAoBO,SAASA,EACdC,EACAC,EACAC,GAEA,MAAMC,WACJA,EADIC,QAEJA,EAFIC,eAGJA,EAHIC,kBAIJA,KACGC,GACDP,EAIEQ,EAAUC,QACAC,IAAdD,EAA0B,CAACN,GAAc,CAACA,EAAYM,GAmCxD,OAAOE,OAAOC,QAjCaZ,IACzB,MAAMa,QAAEA,EAAFJ,UAAWA,KAAcK,GAAkB,IAC5CP,KACH,MAAGD,OAAH,EAAGA,OACAN,GAGCe,EAAWP,EAAOC,GAElBO,EAASC,EAAcA,eAE3BH,EAAcI,QAAU,CAAEA,QAASJ,EAAcI,SAAYhB,GAGzDiB,EAAe,IAChBL,EACHD,QACqB,mBAAZA,EACHA,EAAQG,EAAOI,aAAaL,GAAWN,GACvCI,EACNR,iBACAD,UACAW,YAGF,OAAOJ,OAAOC,OAAOX,EAAUkB,EAAcH,GAAS,CACpDD,WACAN,YACAY,QAAS,CAACC,EAA4BC,IACpCP,EAAOQ,aAAaT,EAAUO,EAASC,IAJ3C,GAQsC,CACtCE,cAvCoB,IAAMtB,EAwC1BK,SACAJ,UACAC,kBAEH,uBCOM,SAA6BL,EAAcE,GAChD,OAAOH,EAAgBC,EAAS0B,EAAVA,iBAA4BxB,EACnD,mBCpEM,UAMLI,kBACEA,KACGC,GAELL,GAiBA,OAAOS,OAAOC,QAZZZ,GAEO2B,EAAAA,YACL,IACKpB,KACH,MAAGD,OAAH,EAAGA,OACAN,GAELE,IAIuC,CACzCM,OAhBa,IAAMD,EAAeqB,YAiBlCC,WAAYtB,EAAesB,YAE9B,gBCNM,SAAqB7B,EAAcE,GACxC,OAAOH,EAAgBC,EAAS8B,EAAVA,SAAoB5B,EAC3C"}