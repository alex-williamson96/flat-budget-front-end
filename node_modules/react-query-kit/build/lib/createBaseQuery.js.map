{"version":3,"file":"createBaseQuery.js","sources":["../../src/createBaseQuery.ts"],"sourcesContent":["import type { SetDataOptions, UseBaseQueryOptions } from '@tanstack/react-query'\nimport { useQueryClient } from '@tanstack/react-query'\nimport type {\n  AdditionalCreateOptions,\n  AdditionalQueryHookOptions,\n  Updater,\n} from './types'\n\ninterface CreateQueryOptions\n  extends Omit<UseBaseQueryOptions, 'queryKey' | 'queryFn' | 'enabled'>,\n    AdditionalCreateOptions<any, any> {\n  useDefaultOptions?: () => QueryBaseHookOptions\n}\n\ntype QueryBaseHookOptions = Omit<\n  UseBaseQueryOptions,\n  'queryKey' | 'queryFn' | 'enabled'\n> &\n  AdditionalQueryHookOptions<any, any> & { context?: any }\n\nexport function createBaseQuery(\n  options: any,\n  useRQHook: (options: any, queryClient?: any) => any,\n  queryClient?: any\n): any {\n  const {\n    primaryKey,\n    queryFn,\n    queryKeyHashFn,\n    useDefaultOptions,\n    ...defaultOptions\n  } = options as CreateQueryOptions\n\n  const getPrimaryKey = () => primaryKey\n\n  const getKey = (variables?: any) =>\n    variables === undefined ? [primaryKey] : [primaryKey, variables]\n\n  const useGeneratedQuery = (options: QueryBaseHookOptions) => {\n    const { enabled, variables, ...mergedOptions } = {\n      ...defaultOptions,\n      ...useDefaultOptions?.(),\n      ...options,\n    } as QueryBaseHookOptions\n\n    const queryKey = getKey(variables)\n\n    const client = useQueryClient(\n      // compatible with ReactQuery v4\n      mergedOptions.context ? { context: mergedOptions.context } : queryClient\n    )\n\n    const queryOptions = {\n      ...mergedOptions,\n      enabled:\n        typeof enabled === 'function'\n          ? enabled(client.getQueryData(queryKey), variables)\n          : enabled,\n      queryKeyHashFn,\n      queryFn,\n      queryKey,\n    }\n\n    return Object.assign(useRQHook(queryOptions, client), {\n      queryKey,\n      variables,\n      setData: (updater: Updater<any, any>, setDataOptions?: SetDataOptions) =>\n        client.setQueryData(queryKey, updater, setDataOptions),\n    })\n  }\n\n  return Object.assign(useGeneratedQuery, {\n    getPrimaryKey,\n    getKey,\n    queryFn,\n    queryKeyHashFn,\n  })\n}\n"],"names":["createBaseQuery","options","useRQHook","queryClient","primaryKey","queryFn","queryKeyHashFn","useDefaultOptions","defaultOptions","getPrimaryKey","getKey","variables","undefined","useGeneratedQuery","enabled","mergedOptions","queryKey","client","useQueryClient","context","queryOptions","getQueryData","Object","assign","setData","updater","setDataOptions","setQueryData"],"mappings":";;;;;;AAoBO,SAASA,eAAT,CACLC,OADK,EAELC,SAFK,EAGLC,WAHK,EAIA;EACL,MAAM;IACJC,UADI;IAEJC,OAFI;IAGJC,cAHI;IAIJC,iBAJI;IAKJ,GAAGC,cAAAA;AALC,GAAA,GAMFP,OANJ,CAAA;;EAQA,MAAMQ,aAAa,GAAG,MAAML,UAA5B,CAAA;;AAEA,EAAA,MAAMM,MAAM,GAAIC,SAAD,IACbA,SAAS,KAAKC,SAAd,GAA0B,CAACR,UAAD,CAA1B,GAAyC,CAACA,UAAD,EAAaO,SAAb,CAD3C,CAAA;;EAGA,MAAME,iBAAiB,GAAIZ,OAAD,IAAmC;IAC3D,MAAM;MAAEa,OAAF;MAAWH,SAAX;MAAsB,GAAGI,aAAAA;KAAkB,GAAA,EAC/C,GAAGP,cAD4C;AAE/C,MAAA,IAAGD,iBAAH,IAAA,IAAA,GAAA,KAAA,CAAA,GAAGA,iBAAiB,EAApB,CAF+C;MAG/C,GAAGN,OAAAA;KAHL,CAAA;AAMA,IAAA,MAAMe,QAAQ,GAAGN,MAAM,CAACC,SAAD,CAAvB,CAAA;IAEA,MAAMM,MAAM,GAAGC,yBAAc;IAE3BH,aAAa,CAACI,OAAd,GAAwB;MAAEA,OAAO,EAAEJ,aAAa,CAACI,OAAAA;KAAjD,GAA6DhB,WAFlC,CAA7B,CAAA;AAKA,IAAA,MAAMiB,YAAY,GAAG,EACnB,GAAGL,aADgB;AAEnBD,MAAAA,OAAO,EACL,OAAOA,OAAP,KAAmB,UAAnB,GACIA,OAAO,CAACG,MAAM,CAACI,YAAP,CAAoBL,QAApB,CAAD,EAAgCL,SAAhC,CADX,GAEIG,OALa;MAMnBR,cANmB;MAOnBD,OAPmB;AAQnBW,MAAAA,QAAAA;KARF,CAAA;IAWA,OAAOM,MAAM,CAACC,MAAP,CAAcrB,SAAS,CAACkB,YAAD,EAAeH,MAAf,CAAvB,EAA+C;MACpDD,QADoD;MAEpDL,SAFoD;AAGpDa,MAAAA,OAAO,EAAE,CAACC,OAAD,EAA6BC,cAA7B,KACPT,MAAM,CAACU,YAAP,CAAoBX,QAApB,EAA8BS,OAA9B,EAAuCC,cAAvC,CAAA;AAJkD,KAA/C,CAAP,CAAA;GAzBF,CAAA;;AAiCA,EAAA,OAAOJ,MAAM,CAACC,MAAP,CAAcV,iBAAd,EAAiC;IACtCJ,aADsC;IAEtCC,MAFsC;IAGtCL,OAHsC;AAItCC,IAAAA,cAAAA;AAJsC,GAAjC,CAAP,CAAA;AAMD;;;;"}