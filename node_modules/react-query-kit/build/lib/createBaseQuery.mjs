import { useQueryClient } from '@tanstack/react-query';

function createBaseQuery(options, useRQHook, queryClient) {
  const {
    primaryKey,
    queryFn,
    queryKeyHashFn,
    useDefaultOptions,
    ...defaultOptions
  } = options;

  const getPrimaryKey = () => primaryKey;

  const getKey = variables => variables === undefined ? [primaryKey] : [primaryKey, variables];

  const useGeneratedQuery = options => {
    const {
      enabled,
      variables,
      ...mergedOptions
    } = { ...defaultOptions,
      ...(useDefaultOptions == null ? void 0 : useDefaultOptions()),
      ...options
    };
    const queryKey = getKey(variables);
    const client = useQueryClient( // compatible with ReactQuery v4
    mergedOptions.context ? {
      context: mergedOptions.context
    } : queryClient);
    const queryOptions = { ...mergedOptions,
      enabled: typeof enabled === 'function' ? enabled(client.getQueryData(queryKey), variables) : enabled,
      queryKeyHashFn,
      queryFn,
      queryKey
    };
    return Object.assign(useRQHook(queryOptions, client), {
      queryKey,
      variables,
      setData: (updater, setDataOptions) => client.setQueryData(queryKey, updater, setDataOptions)
    });
  };

  return Object.assign(useGeneratedQuery, {
    getPrimaryKey,
    getKey,
    queryFn,
    queryKeyHashFn
  });
}

export { createBaseQuery };
//# sourceMappingURL=createBaseQuery.mjs.map
